import java.io.BufferedInputStream;
import java.math.BigInteger;
import java.util.*;
public class Main{
    /*
小明买了块高端大气上档次的电子手表，他正准备调时间呢。
在 M78 星云，时间的计量单位和地球上不同，M78 星云的一个小时有 n 分钟。
大家都知道，手表只有一个按钮可以把当前的数加一。在调分钟的时候，如果当前显示的数是 0 ，那么按一下按钮就会变成 1，再按一次变成 2 。如果当前的数是 n - 1，按一次后会变成 0 。
作为强迫症患者，小明一定要把手表的时间调对。如果手表上的时间比当前时间多1，则要按 n - 1 次加一按钮才能调回正确时间。
小明想，如果手表可以再添加一个按钮，表示把当前的数加 k 该多好啊……
他想知道，如果有了这个 +k 按钮，按照最优策略按键，从任意一个分钟数调到另外任意一个分钟数最多要按多少次。
注意，按 +k 按钮时，如果加k后数字超过n-1,则会对n取模。
比如，n=10, k=6 的时候，假设当前时间是0，连按2次 +k 按钮，则调为2。


「输入格式」
一行两个整数 n, k ，意义如题。


「输出格式」
一行一个整数
表示：按照最优策略按键，从一个时间调到另一个时间最多要按多少次。


「样例输入」
5 3


「样例输出」
2


「样例解释」
如果时间正确则按0次。否则要按的次数和操作系列之间的关系如下：
1：+1
2：+1, +1
3：+3
4：+3, +1

     */
    static class Node{
        int cost,time;
        Node(int cost,int time){
            this.cost=cost;
            this.time=time;
        }
    }
    //使用bfs，两个数组，一个记录当前是否访问，一个记录访问所需要的次数
    public static void main(String args[]) {
        Scanner sc = new Scanner(new BufferedInputStream(System.in));
        int n,k;
        n=sc.nextInt();
        k=sc.nextInt();
        int[] nums=new int[n];
        boolean[] visited=new boolean[n];
        Queue<Node> queue=new LinkedList<>();
        //从0开始
        visited[0]=true;
        nums[0]=1;
        queue.offer(new Node(0,0));
        while (!queue.isEmpty()){
            Node node=queue.poll();
            int time= node.time;
            int to=(time+1)%n;//可能有问题
            if(!visited[to]){
                queue.offer(new Node(node.cost+1,to));
                nums[to]=node.cost+1;
                visited[to]=true;
            }
            to=(time+k)%n;
            if(!visited[to]){
                queue.offer(new Node(node.cost+1,to));
                nums[to]=node.cost+1;
                visited[to]=true;
            }
        }
        int max=0;
        for (int i = 0; i < n; i++) {
            if(max<nums[i])max=nums[i];
        }
        System.out.println(max);

    }

}
