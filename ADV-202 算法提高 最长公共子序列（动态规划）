import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.*;

public class Main {

    /*
    序列型动态规划
    最长公共子序列
    A串长lena
    B串长lenb
    状态dp[i][j]表示A的前i个字符和B的前j个字符的最长公共子序列
    计算顺序：i->0~lena,j->0~lenb
    转移方程：
    dp[i][0]=0,dp[0][j]=0;
    其他若相同，即a[i]==b[j],则dp[i][j]=dp[i-1][j-1]+1
    若不同，则为max(dp[i-1][j],dp[i][j-1])
     */
    public static void main(String[] args) throws Exception {
        Scanner sc=new Scanner(new BufferedInputStream(System.in));
        String a=sc.next();
        String b=sc.next();
        int lena=a.length();
        int lenb=b.length();
        int[][] dp=new int[lena+1][lenb+1];
        for (int i = 1; i <= lena ; i++) {
            for (int j = 1; j <= lenb; j++) {
                if(a.charAt(i-1)==b.charAt(j-1)){
                    dp[i][j]=dp[i-1][j-1]+1;
                }else{
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        System.out.println(dp[lena][lenb]);
    }

}
