import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.*;

public class Main {
    static int i1, i2, i3, i4, i5, cnt, res = 0;
    static int[] dis = {-1, 1, -4, 4};//左右上下
    static boolean[] visit = new boolean[13];//1~12

    //碰到4，8且当时方向是向右时continue，同理5，9向左
    static void dfs(int index) {
        if (cnt >= 5) return;
        for (int i = 0; i < 4; i++) {
            //边界判断
            if ((dis[i] == 1 && (index == 4 || index == 8)) || (dis[i] == -1 && (index == 5 || index == 9))) {
                continue;
            }
            int t = index + dis[i];
            if (t >= 1 && t <= 12 && !visit[t] && (t == i2 || t == i3 || t == i4 || t == i5)) {
                visit[t] = true;
                cnt++;
                dfs(t);
            }
        }
    }

    public static void main(String[] args) throws Exception {
        for (i1 = 1; i1 <= 12 - 4; i1++) {
            for (i2 = i1 + 1; i2 <= 12 - 3; i2++) {
                for (i3 = i2 + 1; i3 <= 12 - 2; i3++) {
                    for (i4 = i3 + 1; i4 <= 12 - 1; i4++) {
                        for (i5 = i4 + 1; i5 <= 12; i5++) {
                            for (int i = 0; i < 13; i++) {
                                visit[i] = false;
                            }
                            cnt = 1;
                            dfs(i1);
                            if (cnt == 5) res++;
                        }
                    }
                }
            }
        }
        System.out.println(res);
    }

}
